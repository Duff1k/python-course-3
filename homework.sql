DROP TABLE IF EXISTS Enrollment;
DROP TABLE IF EXISTS Course;
DROP TABLE IF EXISTS Student;
DROP TABLE IF EXISTS Faculty;

CREATE TABLE Faculty (
    id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(255) NOT NULL UNIQUE,
    foundation_year INT NOT NULL CHECK (foundation_year >= 1900)
);

CREATE TABLE Student (
    id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    full_name VARCHAR(255) NOT NULL,
    birth_date DATE NOT NULL,
    faculty_id INT NOT NULL,
    email VARCHAR(255) UNIQUE,
    CONSTRAINT fk_faculty
        FOREIGN KEY(faculty_id)
        REFERENCES Faculty(id)
        ON DELETE RESTRICT
);

CREATE TABLE Course (
    id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(255) NOT NULL,
    credits INT NOT NULL CHECK (credits BETWEEN 1 AND 10),
    faculty_id INT NOT NULL,
    CONSTRAINT fk_course_faculty
        FOREIGN KEY(faculty_id)
        REFERENCES Faculty(id)
        ON DELETE CASCADE
);

CREATE TABLE Enrollment (
    id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    student_id INT NOT NULL,
    course_id INT NOT NULL,
    enroll_date DATE NOT NULL DEFAULT CURRENT_DATE,
    CONSTRAINT fk_enrollment_student
        FOREIGN KEY(student_id)
        REFERENCES Student(id)
        ON DELETE CASCADE,
    CONSTRAINT fk_enrollment_course
        FOREIGN KEY(course_id)
        REFERENCES Course(id)
        ON DELETE CASCADE,
    CONSTRAINT unique_student_course UNIQUE (student_id, course_id)
);


INSERT INTO Faculty (name, foundation_year) VALUES
('Факультет Информационных Технологий', 1995),
('Экономический Факультет', 1950),
('Юридический Факультет', 1931);

INSERT INTO Student (full_name, birth_date, faculty_id, email) VALUES
('Иванов Иван Иванович', '2002-01-15', 1, 'ivanov.ii@example.com'),
('Петрова Мария Сергеевна', '2003-05-20', 1, 'petrova.ms@example.com'),
('Сидоров Алексей Петрович', '2002-11-30', 1, 'sidorov.ap@example.com'),
('Козлова Елена Викторовна', '2004-03-10', 2, 'kozlova.ev@example.com'),
('Смирнов Дмитрий Андреевич', '2003-07-22', 2, 'smirnov.da@example.com'),
('Новикова Анна Юрьевна', '2001-09-01', 3, 'novikova.au@example.com');

INSERT INTO Course (name, credits, faculty_id) VALUES
('Базы данных', 5, 1),
('Алгоритмы и структуры данных', 5, 1),
('Микроэкономика', 4, 2),
('Макроэкономика', 4, 2),
('Теория государства и права', 6, 3);

INSERT INTO Enrollment (student_id, course_id) VALUES
(1, 1),
(1, 2),
(2, 1),
(3, 1),
(4, 3),
(5, 3),
(6, 5);


-- Список всех студентов с названием факультета на котором они учатся
SELECT
    s.full_name,
    f.name AS faculty_name
FROM
    Student s
JOIN
    Faculty f ON s.faculty_id = f.id;

-- Список курсов с указанием факультета к которому они относятся
SELECT
    c.name AS course_name,
    c.credits,
    f.name AS faculty_name
FROM
    Course c
JOIN
    Faculty f ON c.faculty_id = f.id;

-- Список студентов и курсов на которые они зачислены
SELECT
    s.full_name AS student_name,
    c.name AS course_name,
    e.enroll_date
FROM
    Enrollment e
JOIN
    Student s ON e.student_id = s.id
JOIN
    Course c ON e.course_id = c.id
ORDER BY
    s.full_name;

-- Все студенты которые учатся более чем на одном курсе
SELECT
    s.full_name,
    COUNT(e.course_id) AS number_of_courses
FROM
    Student s
JOIN
    Enrollment e ON s.id = e.student_id
GROUP BY
    s.id, s.full_name
HAVING
    COUNT(e.course_id) > 1;

-- Курсы, на которых учатся более 2 студентов
SELECT
    c.name AS course_name,
    COUNT(e.student_id) AS number_of_students
FROM
    Course c
JOIN
    Enrollment e ON c.id = e.course_id
GROUP BY
    c.id, c.name
HAVING
    COUNT(e.student_id) > 2;